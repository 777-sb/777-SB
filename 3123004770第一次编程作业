#include <fstream>
#include <iostream>
#include <string>
#include <set>
#include <sstream>
#include <iomanip>
#include <algorithm> 
#include<iterator>
using namespace std;


// 读取文件内容
string readFile(const string& path) {
	ifstream file(path);
	if (!file) {  // 检查文件是否打开成功
		cerr << "文件未找到: " << path << endl;
		exit(1);
	}
	// 将文件内容读取到字符串
	string content((istreambuf_iterator<char>(file)), (istreambuf_iterator<char>()));
	return content;
}

// 分割文本为单词并存储到集合
void splitWords(const string& text, set<string>& words) {
	stringstream ss(text);
	string word;
	while (ss >> word) {  // 按空格分割单词
		words.insert(word);
	}
}

int main(int argc, char* argv[]) {
	// 检查命令行参数数量
	if (argc != 3) {
		cerr << "参数错误，应为：原文路径 抄袭版路径 输出路径" << endl;
		return 1;
	}
	
	string originalPath = argv[1];
	string plagiarizedPath = argv[2];
	string outputPath = argv[3];

	// 读取原文和抄袭版内容
	string originalText = readFile(originalPath);
	string plagiarizedText = readFile(plagiarizedPath);

	set<string> origWords, plagWords;
	splitWords(originalText, origWords);
	splitWords(plagiarizedText, plagWords);

	set<string> commonWords;
	// 计算共同单词（集合交集）
	set_intersection(
		origWords.begin(), origWords.end(),
		plagWords.begin(), plagWords.end(),
		inserter(commonWords, commonWords.begin())
	);

	// 计算重复率
	double similarity = commonWords.size() /
		static_cast<double>(max(origWords.size(), plagWords.size()));

	// 写入结果到输出文件
	ofstream outFile(outputPath);
	if (!outFile) {
		cerr << "无法创建输出文件" << endl;
		return 1;
	}
	outFile << fixed << setprecision(2) << similarity;
	outFile.close();

	return 0;
}
